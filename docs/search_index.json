[["index.html", "Configurando o Git e Github Capítulo 1 Sobre", " Configurando o Git e Github Gabriel Justo, Lucas Stefano 2022-03-13 Capítulo 1 Sobre O Objetivo deste manual é ajudá-lo a configurar o Git e o Github no ambiente do Rstudio. Mas ele também abrange a configuração para outras IDEs. Vamos lá! "],["git.html", "Capítulo 2 Git 2.1 Instalando o Git", " Capítulo 2 Git O Git é um sistema de controle de versão(popularmente conhecido como, versionamento). Cuja finalidade é gerenciar diferentes versões de um documento. Ele é muito utilizado por empresas e grupos com grandes equipes de pessoas para acompanhar as alterações e coordenar a colaboração entre uma equipe. Alguns exemplos de projetos que utilizam o Git são: R, Python, Visual Studio Code, Linux, entre outros. 2.1 Instalando o Git Nos próximos itens iremos aprender como instalar o Git no Windows e Linux. 2.1.1 Windows Acesse o site: Git e selecione o Sistema Operacional Windows. Em seguida abra o arquivo executável no seu computador. Clique em Next. Quando chegar nessa tela, o Instalador do Git irá perguntar qual editor você prefere utilizar como padrão para o Git: Você escolher o seu editor preferido da lista, caso queira. Por padrão, o Git irá utilizar o Vim Ao avançar na Instalação, o Git irá perguntar se você gostaria de ajustar o nome da branch principal depois de usar o comando git init. Após o início dos protestos do Black Lives Matter, retomados após o assassinato de George Floyd no final de maio de 2022, o projeto Git tem incentivado os seus usuários a não utilizar mais terminologias que envolvem a discriminação racial ou faz referência ao período de escravidão. Desde então, é uma boa prática na comunidade que a branch principal se chame main ao invés de master. Em seguida prossiga a instalação como Default em todas as opções. Protinho, seu Git está instalado em seu Windows. 2.1.2 Linux Para instalar o Git em qualquer ambiente Linux, basta apenas abrir o seu terminal (neste tutorial estamos considerando a distribuição Ubuntu) e digitar: sudo apt install git Feito! O Git está instalado no seu Linux! "],["github.html", "Capítulo 3 Github 3.1 Criando sua conta", " Capítulo 3 Github O Github é um serviço de hospedagem para projetos que utilizam o controle de versão Git. Nessa plataforma podemos encontrar todos as commits dos projetos que estão lá hospedados,também acompanhar o desenvolvimento de projetos, quantas pessoas estão envolvidas com o projeto e etc. 3.1 Criando sua conta Para criar sua conta no Github é bem simples e rápido. Basta apenas acessar o link: www.github.com e clicar em Sign up. Em seguida, o Github irá te guia em todo o processo de criação da sua conta: "],["rstudio.html", "Capítulo 4 Rstudio 4.1 Pacote usethis", " Capítulo 4 Rstudio Agora que configuramos o Git em nosso computador e criamos uma conta n Github, chegou a hora de configurar ambos no nosso ambiente do Rstudio. 4.1 Pacote usethis O pacote {usethis} é um pacote que ajuda com todo o fluxo de desenvolvimento em no R. Ele nos ajuda a criar os arquivos, configurar o Git, criar os repositórios no Github, criar as licenças, Readme e etc. 4.1.1 Instalando o Usethis Para instalar o usethis, digite no console ou crie um arquivo configgit.R no seu Rstudio: install.packages(&quot;usethis&quot;) 4.1.2 Configurando Git e Github com Usethis # Informar para o Git seu nome, e email usethis::use_git_config( # Seu nome de usuario no github: user.name = &quot;gabrielDjusto&quot;, # Seu email cadastrado no github: user.email = &quot;&quot;) #NENHUMA MESSAGEM SURGIRÁ APÓS O USO DO COMANDO ACIMA 4.1.2.1 Crie um Personal Access Token (PAT) O pat serve para autenticar ao GitHub, podendo ser utilizado como senha de #acesso ou internamente para automatizar tarefas (como criar um repositório). usethis::create_github_token() Em seguida, Use a função usethis::edit_r_environ() para abrir o arquivo .Renviron para salvar seu token usethis::edit_r_environ() Crie uma nova linha no arquivo .Renviron: GITHUB_PAT=&quot;seu token&quot; Pule uma linha e salve o arquivo. Se certifique que o arquivo termine com uma linha vazia! Vá em Session &gt; Restart R (reinicie a sessão do R): Para checar se as configurações deram certo, digite: usethis::git_sitrep() As informações abaixo precisam aparecer: # Git config (global) # * Name: &#39;Seu nome de usuario no github&#39; # * Email: &#39;Seu email cadastrado no github&#39; # * Global (user-level) gitignore file: &lt;unset&gt; # # # * Personal access token for &#39;https://github.com&#39;: &#39;&lt;discovered&gt;&#39; OBS:  é importante que apareça! Caso contrário, houve algum erro em etapas anteriores gitcreds::gitcreds_set() 4.1.3 Utilizando o Usethis 4.1.3.1 Inciando o Git Para iniciar o Git pelo usethis, digite: usethis::use_git() #Para adicionar funcionalidades diferentes use branches O arquivo .gitgnore contém arquivos que não desejamos que sejam incluídos no repositório do Github. O arquivo .Renviron é utilizado principalmente para senhas do projeto portanto, adicione tal arquivo no .gitgnore. 4.1.4 Criando um repositorio no Github Crie um Projeto no Rstudio usethis::use_github( #Criando um repositório público: private = TRUE) #TRUE consiste em um repo privado Crie o arquivo README: É um texto em formato rmarkdown contendo o que será feito naquele repositório. Criado com a função: usethis::use_readme_rmd() "],["clonando-um-repositório-do-github.html", "Capítulo 5 Clonando um repositório do Github 5.1 Método 1 (Manualmente) 5.2 Método 2 (usando a linha de comando)", " Capítulo 5 Clonando um repositório do Github 5.1 Método 1 (Manualmente) 5.1.1 Remotamente Caso em que há um repositório no github e queremos baixá-lo em nosso PC Copie a URL do projeto de interesse no Github: Abra o Rstuido e vá em New project &gt; Version control &gt; Git . Depois use coloque a URL no campo Repository URL obtida no passo 1: E clique em Create Project. Caso o repositorio não seja público. Então, primeiro precisamos realizar um fork do projeto. 5.2 Método 2 (usando a linha de comando) A partir de um repositório existente, fazer um fork e clonar diretamente do RStudio usethis::create_from_github(&quot;usuario_github/nome_do_repositorio&quot;, destdir = &quot;diretorio em seu PC onde salvar o projeto&quot;, fork = TRUE)#se igual a TRUE, irá fazer o fork do repositório. #ou seja, aparecerá uma copia deste repo no seu github "],["trabalhando-colaborativamente.html", "Capítulo 6 Trabalhando colaborativamente", " Capítulo 6 Trabalhando colaborativamente Crie Branches (ramos) para realizar modificações Antes de fazer qualquer modificação nos arquivos do repo, crie uma branch com: usethis::pr_init(branch = &quot;&quot;) #branch o nome da branch que você quer criar. Enviando as mudanças para o repositório remoto com: usethis::pr_push() Caso voce não tenha permissão para alterar o codigo automaticamente então você deve aguardar que o dono do repositorio permita a alteração sugerida. Quando sua alteracao no codigo for aceite aprecerá o rótulo Merged. Após aceita a alteração use: usethis::pr_finish() Isto realiza três operações: Retorna para a branch principal (master); Realiza o pull (atualizando o conteudo do código todo); deleta a branch criada para enviar a modificação sugerida ao dono do repositório. "],["termos-utilizados-comumente.html", "Capítulo 7 Termos utilizados comumente", " Capítulo 7 Termos utilizados comumente Commit: São mudanças realizadas no(s) arquivos(s) do projeto no repositório local (seu computador). Ao enviar as mudanças atribuímos a mesma um texto (commit message) indicando o que está sendo alterado de modo claro e breve. Push: Ato de enviar as mudanças que estão em repositório local (os commits) #para o repositório remoto (o github). Pull: Ato de trazer as atualizações que estão em repositorio remoto #para o repositorio local (importante para trabalhos em conjunto). Pull Request: Quando é a contribuição de uma pessoa externa no projeto. #O encarregado do projeto determina se aceita tal alteração ou não. Caso a pessoa tenha acesso ao projeto, quando um pull é enviado ele é integrado automaticamente no código. Quando há conflito de pushs, por exemplo, duas pessoas alteram a mesmalinha de um código, devemos resolver o conflito antes de que isto seja integrado o repositorio remoto! O github exibirá os conflitos, caso ocorram. Dica: Siga boas práticas! "],["references.html", "References", " References "],["configurando-o-github.html", "Capítulo 8 configurando o github", " Capítulo 8 configurando o github O Objetivo deste repositório é ajudá-lo a configurar o github no Rstudio. Vamos lá! What is special about using README.Rmd instead of just README.md? You can include R chunks like so: summary(cars) #&gt; speed dist #&gt; Min. : 4.0 Min. : 2.00 #&gt; 1st Qu.:12.0 1st Qu.: 26.00 #&gt; Median :15.0 Median : 36.00 #&gt; Mean :15.4 Mean : 42.98 #&gt; 3rd Qu.:19.0 3rd Qu.: 56.00 #&gt; Max. :25.0 Max. :120.00 Youll still need to render README.Rmd regularly, to keep README.md up-to-date. devtools::build_readme() is handy for this. You could also use GitHub Actions to re-render README.Rmd every time you push. An example workflow can be found here: https://github.com/r-lib/actions/tree/v1/examples. You can also embed plots, for example: In that case, dont forget to commit and push the resulting figure files, so they display on GitHub. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
